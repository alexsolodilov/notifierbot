import os
import asyncio
import json
from telethon import TelegramClient, errors
from telegram import Bot
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_IDS_RAW = os.getenv('CHAT_IDS')  # –°—Ç—Ä–æ–∫–∞ —Å ID —á–∞—Ç–æ–≤
TARGET_REACH = os.getenv('TARGET_REACH', '300')  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞
PHONE_NUMBER = os.getenv('PHONE_NUMBER')  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
CHANNEL_NAMES_RAW = os.getenv('CHANNEL_NAMES')  # JSON-–º–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = {
    'API_ID': API_ID,
    'API_HASH': API_HASH,
    'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
    'CHAT_IDS': CHAT_IDS_RAW,
    'CHANNEL_NAMES': CHANNEL_NAMES_RAW,
    'PHONE_NUMBER': PHONE_NUMBER
}

missing_vars = [var for var, value in required_vars.items() if not value]
if missing_vars:
    logger.error(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {", ".join(missing_vars)}')
    exit(1)

# –ü–∞—Ä—Å–∏–Ω–≥ CHAT_IDS
try:
    CHAT_IDS = [int(chat_id.strip()) for chat_id in CHAT_IDS_RAW.split(',') if chat_id.strip().isdigit()]
except ValueError as ve:
    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ CHAT_IDS: {ve}')
    exit(1)

if not CHAT_IDS:
    logger.error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö CHAT_IDS.')
    exit(1)

# –ü–∞—Ä—Å–∏–Ω–≥ CHANNEL_NAMES –∫–∞–∫ JSON-–º–∞—Å—Å–∏–≤
try:
    CHANNEL_NAMES = json.loads(CHANNEL_NAMES_RAW)
    logger.info(f'CHANNEL_NAMES: {CHANNEL_NAMES}')
except json.JSONDecodeError as je:
    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ CHANNEL_NAMES –∫–∞–∫ JSON: {je}')
    exit(1)

if not CHANNEL_NAMES:
    logger.error('–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CHANNEL_NAMES.')
    exit(1)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TARGET_REACH –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
try:
    TARGET_REACH = int(TARGET_REACH)
except ValueError:
    logger.error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TARGET_REACH –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.')
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient('session_name', API_ID, API_HASH)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
NOTIFIED_FILE = 'notified_messages.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(NOTIFIED_FILE):
    with open(NOTIFIED_FILE, 'r', encoding='utf-8') as f:
        try:
            notified_messages = json.load(f)
        except json.JSONDecodeError as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {NOTIFIED_FILE}: {e}')
            notified_messages = {channel: [] for channel in CHANNEL_NAMES}
else:
    notified_messages = {channel: [] for channel in CHANNEL_NAMES}

def save_notified_messages():
    with open(NOTIFIED_FILE, 'w', encoding='utf-8') as f:
        json.dump(notified_messages, f, ensure_ascii=False, indent=4)

async def send_notification(channel_title, message):
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
    post_text = (message.text[:100] + '...') if message.text and len(message.text) > 100 else (message.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
    text = (f'üìà **–ù–æ–≤—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –æ—Ö–≤–∞—Ç!**\n'
            f'**–ö–∞–Ω–∞–ª:** {channel_title}\n'
            f'**–ü–æ—Å—Ç:** {post_text}\n'
            f'**–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:** {message.views}')
    
    tasks = []
    for chat_id in CHAT_IDS:
        tasks.append(
            bot.send_message(chat_id=chat_id, text=text, parse_mode='Markdown')
        )
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    for chat_id, result in zip(CHAT_IDS, results):
        if isinstance(result, Exception):
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {result}')
        else:
            logger.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –¥–ª—è –ø–æ—Å—Ç–∞ {message.id} –≤ –∫–∞–Ω–∞–ª–µ "{channel_title}".')

async def get_channel_entity(channel_name):
    try:
        dialogs = await client.get_dialogs()
        for dialog in dialogs:
            if dialog.is_channel and dialog.title == channel_name:
                logger.info(f'–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {dialog.title}')
                return dialog.entity
        logger.warning(f'–ö–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{channel_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ "{channel_name}": {e}')
        return None

async def monitor_channel(channel_name, channel_entity):
    try:
        async for message in client.iter_messages(channel_entity, limit=100):
            if message.id in notified_messages.get(channel_name, []):
                continue
            if message.views and message.views >= TARGET_REACH:
                await send_notification(channel_entity.title, message)
                notified_messages[channel_name].append(message.id)
                save_notified_messages()
    except errors.rpcerrorlist.ChannelPrivateError:
        logger.error(f'–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É "{channel_name}" –∑–∞–ø—Ä–µ—â—ë–Ω.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ "{channel_name}": {e}')

async def monitor_all_channels(channel_entities):
    tasks = []
    for channel_name, channel_entity in channel_entities.items():
        if channel_entity:
            tasks.append(monitor_channel(channel_name, channel_entity))
    if tasks:
        await asyncio.gather(*tasks)

async def main():
    await client.start(phone=PHONE_NUMBER)
    logger.info('–ö–ª–∏–µ–Ω—Ç Telethon –∑–∞–ø—É—â–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    channel_entities = {}
    for channel_name in CHANNEL_NAMES:
        entity = await get_channel_entity(channel_name)
        channel_entities[channel_name] = entity

    if not any(channel_entities.values()):
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.')
        return

    try:
        while True:
            await monitor_all_channels(channel_entities)
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã.')
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    except KeyboardInterrupt:
        logger.info('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
    finally:
        await client.disconnect()
        logger.info('–ö–ª–∏–µ–Ω—Ç Telethon –æ—Ç–∫–ª—é—á—ë–Ω.')

if __name__ == '__main__':
    asyncio.run(main())
